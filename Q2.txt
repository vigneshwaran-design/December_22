Objects And Its Internal Representation In JavaScript :

Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. These objects are quite 
different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol) in the sense that while these 
primitive data-types all store a single value each (depending on their types).

Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value. 
That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.
 {Eg. If your object is a student, it will have properties like name, age, address, id, etc and methods like updateAddress, updateNam, etc.}

 OBECTS AND PROPERTIES :

 A JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to 
the object. Object properties are basically the same as ordinary JavaScript variables, except for the attachment to objects. 
The properties of an object define the characteristics of the object. You access the properties of an object with a simple 
dot-notation:
Like all JavaScript variables, both the object name (which could be a normal variable) and property name are case sensitive. 
You can define a property by assigning it a value. For example, let’s create an object named myCar and give it properties named 
make, model, and year as follows.  
EG: CODE:-
{
var myCar = new Object();
myCar.make = 'Ford';
myCar.model = 'Mustang';
myCar.year = 1969;
}

CREATING OBECTS IN JAVASCRIPT :

Create JavaScript Object with Object Literal:-
One of easiest way to create a javascript object is object literal, simply define the property and values inside curly braces.
EG: CODE:-
{
let bike = {name: 'SuperSport', maker:'Ducati', engine:'937cc'};
}

Create JavaScript Object with Constructor :-
Constructor is nothing but a function and with help of new keyword, constructor function allows to create multiple objects of same 
flavor.
EG: CODE:-
{
function Vehicle(name, maker) {
   this.name = name;
   this.maker = maker;
}
let car1 = new Vehicle(’Fiesta’, 'Ford’);
let car2 = new Vehicle(’Santa Fe’, 'Hyundai’)
console.log(car1.name);    
console.log(car2.name);    
}

Using the JavaScript Keyword new :-

The following example also creates a new JavaScript object with four properties:
Example
var person = new Object();
person.firstName = “John”;
person.lastName = “Doe”;
person.age = 50;
person.eyeColor = “blue”;
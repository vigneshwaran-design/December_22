Write a blog on Difference between HTTP1.1 vs HTTP2

Introduction

The Hypertext Transfer Protocol, or HTTP, is an application protocol that has been the de facto standard for communication on the
World Wide Web since its invention in 1989. From the release of HTTP/1.1 in 1997 until recently, there have been few revisions to the
protocol. But in 2015, a reimagined version called HTTP/2 came into use, which offered several methods to decrease latency, especially 
when dealing with mobile platforms and server-intensive graphics and videos. HTTP/2 has since become increasingly popular, with some
estimates suggesting that around a third of all websites in the world support it.

HTTP 1.1 :

Developed by Timothy Berners-Lee in 1989 as a communication standard for the World Wide Web, HTTP is a top-level application protocol 
that exchanges information between a client computer and a local or remote web server. In this process, a client sends a text-based request 
to a server by calling a method like GET or POST. In response, the server sends a resource like an HTML page back to the client.

This request uses the GET method, which asks for data from the host server listed after Host:. In response to this request, the example.com web server
returns an HTML page to the requesting client, in addition to any images, stylesheets, or other resources called for in the HTML.
Note that not all of the resources are returned to the client in the first call for data. The requests and responses will go back and 
forth between the server and client until the web browser has received all the resources necessary to render the contents of the HTML.

       HOST(Browser)                   Target(Webserver)
  Application Layer(HTTP)           Application Layer(HTTP)
  Transport Layer(TCP)              Transport Layer(TCP)
  Network Layer(IP)                   Network Layer(IP)
  Datalink Layer                     Datalink Layer
                        Internet

 HTTP 2 :

HTTP/2 began as the SPDY protocol, developed primarily at Google with the intention of reducing web page load latency by using techniques 
such as compression, multiplexing, and prioritization. This protocol served as a template for HTTP/2 when the Hypertext Transfer Protocol 
working group httpbis of the IETF (Internet Engineering Task Force) put the standard together, culminating in the publication of HTTP/2 in
May 2015. From the beginning, many browsers supported this standardization effort, including Chrome, Opera, Internet Explorer, and Safari.
Due in part to this browser support, there has been a significant adoption rate of the protocol since 2015, with especially high rates
among new sites.

From a technical point of view, one of the most significant features that distinguishes HTTP/1.1 and HTTP/2 is the binary framing layer, 
which can be thought of as a part of the application layer in the internet protocol stack. As opposed to HTTP/1.1, which keeps all requests
and responses in plain text format, HTTP/2 uses the binary framing layer to encapsulate all messages in binary format, while still 
maintaining HTTP semantics, such as verbs, methods, and headers. An application level API would still create messages in the conventional
HTTP formats, but the underlying layer would then convert these messages into binary. This ensures that web applications created before 
HTTP/2 can continue functioning as normal when interacting with the new protocol.  

BUFFER OVERFLOW :

In any TCP connection between two machines, both the client and the server have a certain amount of buffer space available to hold 
incoming requests that have not yet been processed. These buffers offer flexibility to account for numerous or particularly large requests, 
in addition to uneven speeds of downstream and upstream connections.

There are situations, however, in which a buffer is not enough. For example, the server may be pushing a large amount of data at a pace 
that the client application is not able to cope with due to a limited buffer size or a lower bandwidth. Likewise, when a client uploads a 
huge image or a video to a server, the server buffer may overflow, causing some additional packets to be lost.

In order to avoid buffer overflow, a flow control mechanism must prevent the sender from overwhelming the receiver with data. This section 
will provide an overview of how HTTP/1.1 and HTTP/2 use different versions of this mechanism to deal with flow control according to their 
different delivery models.

CONCLUSION :

As you can see from this point-by-point analysis, HTTP/2 differs from HTTP/1.1 in many ways, with some features providing greater levels
of control that can be used to better optimize web application performance and other features simply improving upon the previous protocol.
Now that you have gained a high-level perspective on the variations between the two protocols, you can consider how such factors as
multiplexing, stream prioritization, flow control, server push, and compression in HTTP/2 will affect the changing landscape of web 
development.

If you would like to see a performance comparison between HTTP/1.1 and HTTP/2, check out this Google demo that compares the protocols 
for different latencies. Note that when you run the test on your computer, page load times may vary depending on several factors such 
as bandwidth, client and server resources available at the time of testing, and so on. If you’d like to study the results of more 
exhaustive testing, take a look at the article HTTP/2 – A Real-World Performance Test and Analysis. Finally, if you would like to 
explore how to build a modern web application, you could follow our How To Build a Modern Web Application to Manage Customer Information 
with Django and React on Ubuntu 18.04 tutorial, or set up your own HTTP/2 server with our How To Set Up Nginx with HTTP/2 Support on 
Ubuntu 16.04 tutorial.